{"version":3,"sources":["components/Header.js","components/PlayerTable.js","components/PositionTabs.js","components/TextBox.js","App.js","reportWebVitals.js","index.js"],"names":["Header","resetBtnClick","className","href","type","id","style","color","onClick","console","log","PlayerTable","props","useEffect","validateSelectionLength","player1","scope","PositionTabs","position","enableLineup","refreshTable","posTab","document","getElementById","textContent","arrowClick","direction","posBtn","positionList","text","index","indexOf","TextBox","submitBtnClick","textAlign","marginTop","App","useState","players","setPlayers","selectedPlayerState","setSelectedPlayers","setEnableLineup","appText","setAppText","viewSelections","setViewSelections","enoughPlayers","setEnoughPlayers","length","getPlayers","disabled","determineAppText","url","httpReq","XMLHttpRequest","onload","playerList","JSON","parse","responseText","open","send","setRequestHeader","onreadystatechange","readyState","status","selections","data","stringify","returnedLineup","playerArray","onSelectPlayer","playerObj","add","arr","filter","uid","selectedPlayers","QBct","RBct","WRct","TEct","Dct","i","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1f7872ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({resetBtnClick}) => {\r\n\r\n    const testfunc = ()  => {\r\n        console.log(\"Clicked Help\");\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light border border-primary\">\r\n            <a className=\"navbar-brand\" href=\"#\">Football App</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n            <div className=\"navbar-nav\">\r\n                    <a className=\"nav-item nav-link active px-4\" style={{color: 'darkred'}} onClick={() => {testfunc()}} href=\"#\">Help <span className=\"sr-only\">(current)</span></a>\r\n                </div>\r\n            <div className=\"navbar-nav\">\r\n                    <a className=\"nav-item nav-link active px-4\" onClick={() => {resetBtnClick()}} href=\"#\">Start Over<span className=\"sr-only\">(current)</span></a>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useEffect, useState} from 'react';\r\n\r\nconst PlayerTable = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.validateSelectionLength();\r\n    })\r\n\r\n    var player1 = {\r\n        uid: 1,\r\n        position: 'QB',\r\n        player_name: 'Aaaaaaaaaaaaaa Bbbbb',\r\n        team: 'PHI',\r\n        opponent: 'DEN',\r\n        salary: '2000',\r\n        projected_pts: '25'\r\n    };\r\n\r\n    // Takes in row number and player UID\r\n    // If player is selected removes selected class\r\n    // If player is not selected, adds the selected class\r\n    const handleRowClick = (rowNumber, playerUid, position) => {\r\n        let rowNum = rowNumber.index + 1;\r\n        let row = document.getElementById('playerTable').rows[rowNum];\r\n        let classes = row.classList;\r\n        let playerObj = {\r\n            \"uid\": playerUid,\r\n            \"position\": position        \r\n        };\r\n        if(classes.contains('selected')) {\r\n            // Remove UID from app.js state\r\n            props.onSelectPlayer(playerObj, false, rowNum);\r\n        }\r\n        else {\r\n            // Pass UID to app.js to insert into state\r\n            props.onSelectPlayer(playerObj, true, rowNum);\r\n        }\r\n    }\r\n\r\n    // Populates the table\r\n    // Contains logic for marking previously selected players as selected \r\n    // param player is full player object \r\n    const getRowData = (player, index) => {\r\n        let selectedPlayers = props.selectedPlayers;\r\n        let selectedRow = false;\r\n        // If player UID is found in state, players row should be highlighted\r\n        if(!props.viewSelections) {\r\n            let output = selectedPlayers.find(arrayElements => arrayElements.uid === player.uid);\r\n            if(output != undefined){\r\n                selectedRow = true;\r\n            }\r\n    }\r\n\r\n        // populates table with players\r\n        if(selectedRow) {\r\n            return (\r\n                <tr key={index} className='selected' onClick={() => handleRowClick({index}, player1.uid, player1.position)}>\r\n                    <td>{player1.player_name}</td>\r\n                    <td>{player1.team}</td>\r\n                    <td>{player1.opponent}</td>\r\n                    <td>{player1.salary}</td>\r\n                    <td>{player1.projected_pts}</td>\r\n                </tr>)\r\n        }\r\n        else {\r\n            return (\r\n                <tr key={index} onClick={() => handleRowClick({index}, player1.uid, player1.position)}>\r\n                    <td>{player1.player_name}</td>\r\n                    <td>{player1.team}</td>\r\n                    <td>{player1.opponent}</td>\r\n                    <td>{player1.salary}</td>\r\n                    <td>{player1.projected_pts}</td>\r\n                </tr>\r\n            )\r\n        }\r\n\r\n    }\r\n    // Map function calls callback function for each element in array\r\n    return (\r\n        <div className='table-scroll-y'>\r\n            <table id='playerTable' className='table table-hover table-fix-head'>\r\n                <thead>\r\n                    <tr>\r\n                        <th scope='col'>Name</th>\r\n                        <th scope='col'>Team</th>\r\n                        <th scope='col'>Vs.</th>\r\n                        <th scope='col'>Salary</th>\r\n                        <th scope='col'>Projected Pts</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr key='1'>\r\n                    <td>{player1.player_name}</td>\r\n                    <td>{player1.team}</td>\r\n                    <td>{player1.opponent}</td>\r\n                    <td>{player1.salary}</td>\r\n                    <td>{player1.projected_pts}</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default PlayerTable","import React, { useState, useEffect } from 'react';\r\n\r\nconst PositionTabs = ({ position, enableLineup }) => {\r\n\r\n    // If enableLineup means user has submitted lineup\r\n    // Lineup tab should be active\r\n    useEffect(() => {\r\n        if (enableLineup) {\r\n            refreshTable('Lineup');\r\n        }\r\n    })\r\n\r\n    const refreshTable = (posTab) => {\r\n        let id = posTab + 'tab';\r\n        let dropDown = document.getElementById('PosBtn');\r\n        dropDown.textContent = posTab;\r\n\r\n        // Calls function in AppJs to refresh the list of players\r\n        // No need to refresh players if displaying lineup\r\n        if (posTab != 'Lineup') {\r\n            position(posTab);\r\n        }\r\n    }\r\n\r\n    // pass in whether previous or next arrow clicked\r\n    // called when arrow button is clicked\r\n    const arrowClick = (direction) => {\r\n\r\n        // If selections showing, set position back to QB on arrow click\r\n        let posBtn = document.getElementById(\"PosBtn\");\r\n        if(posBtn.textContent == \"SEL\") {\r\n            refreshTable(\"QB\");\r\n            return;\r\n        }\r\n\r\n        // If lineup is showing, arrow click disabled\r\n        if(posBtn.textContent == \"Lineup\") {\r\n            return;\r\n        }\r\n\r\n        // create array of positions\r\n        let positionList = [\"QB\", \"RB\", \"WR\", \"TE\", \"FLEX\", \"DEF\"];\r\n\r\n        // get current pos\r\n        let text = posBtn.textContent;\r\n        let index = positionList.indexOf(text);\r\n\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        // depending on click iterate through array\r\n        let position = \"\";\r\n        if (direction == \"next\") {\r\n            if (index == 5) {\r\n                position = positionList[0];\r\n            }\r\n            else {\r\n                index = index + 1;\r\n                position = positionList[index];\r\n            }\r\n        }\r\n        else if (direction == \"prev\") {\r\n            if (index == 0) {\r\n                position = positionList[5];\r\n            }\r\n            else {\r\n                index = index - 1;\r\n                position = positionList[index];\r\n            }\r\n        }\r\n        refreshTable(position);\r\n        return;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"dropdown\" id=\"PosDrop\">\r\n                    <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" id=\"PosBtn\">QB</button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\r\n                        <li><a className=\"dropdown-item\" onClick={() => refreshTable('QB')} id=\"QBtab\">QB</a></li>\r\n                        <li><a className=\"dropdown-item\" onClick={() => refreshTable('RB')} id=\"RBtab\">RB</a></li>\r\n                        <li><a className=\"dropdown-item\" onClick={() => refreshTable('WR')} id=\"WRtab\">WR</a></li>\r\n                        <li><a className=\"dropdown-item\" onClick={() => refreshTable('TE')} id=\"TEtab\">TE</a></li>\r\n                        <li><a className=\"dropdown-item\" onClick={() => refreshTable('FLEX')} id=\"FLEXtab\">FLEX</a></li>\r\n                        <li><a className=\"dropdown-item\" onClick={() => refreshTable('DEF')} id=\"DEFtab\">DEF</a></li>\r\n                    </ul>\r\n                    <button type=\"button\" className=\"btn btn-light\"><i className=\"arrow left\" onClick={() => arrowClick(\"prev\")}></i></button>\r\n                    <button type=\"button\" className=\"btn btn-light\"><i className=\"arrow right\" onClick={() => arrowClick(\"next\")}></i></button>\r\n                    <button type=\"button\" className=\"btn btn-link px-3 mr-5 d-sm-block d-none\"  onClick={() => refreshTable('SEL')}>My Selected Players</button>\r\n                </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <button type=\"button\" className=\"btn btn-link px-3 d-block d-sm-none\"  onClick={() => refreshTable('SEL')}>My Selected Players</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PositionTabs","import React from 'react'\r\n\r\nconst TextBox = ({ text, submitBtnClick}) => {\r\n    return(\r\n        <div>\r\n            <div className='row'>\r\n                <div className='col-8 col-sm-8'>\r\n                    <h1 style={{textAlign: 'center', marginTop: '10px'}}>{text}</h1>\r\n                </div>\r\n                <div className='col-4 col-sm-4 '>\r\n                    <button className=\"btn btn-primary py-3 px-5 rounded d-sm-block d-none\" aria-disabled=\"true\" id=\"SubmitBtn\" style={{marginTop: '17px'}} onClick={() => {submitBtnClick()}}>Submit Lineup!</button>\r\n                    <button className=\"btn btn-primary rounded d-block d-sm-none\" aria-disabled=\"true\" id=\"SubmitBtn\" style={{marginTop: '17px'}} onClick={() => {submitBtnClick()}}>Submit Lineup!</button>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TextBox","import React, {Component, useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './components/Header'\nimport PlayerTable from './components/PlayerTable'\nimport PositionTabs from './components/PositionTabs'\nimport TextBox from './components/TextBox';\n\nfunction App() {\n\n  // State to hold list of players\n  const[players, setPlayers] = useState([])\n\n  // State to hold selected players\n  const[selectedPlayerState, setSelectedPlayers] = useState([]);\n\n  // Means the users optimal lineup will be shown\n  // Will automatically show lineup if true\n  const[enableLineup, setEnableLineup] = useState(false);\n\n  const[appText, setAppText] = useState(\"Welcome to Football App!\");\n\n  // Boolean to tell player table the user has selected to view their selections\n  const[viewSelections, setViewSelections] = useState(false);\n\n  const[enoughPlayers, setEnoughPlayers] = useState(false);\n\n  \n  useEffect(() => {\n        // Default to show QBs\n        if(players.length === 0 && !viewSelections) {\n          getPlayers('QB');\n          //let element = document.getElementById('QBtab');\n          //element.classList.add('active');\n        }\n})\n\n  // Used by reset button\n  const initializePageFromReset = () => {\n    // get players\n    getPlayers('QB');\n\n    // change dropdown text\n    let posBtn = document.getElementById(\"PosBtn\");\n    posBtn.textContent = \"QB\";\n\n    // Set lineup view to false\n    setEnableLineup(false);\n\n\n  }\n\n  const getPlayers = (position) => {\n\n    // Enables the Lineup tab\n    setEnableLineup(false);\n    setViewSelections(false);\n    document.getElementById('SubmitBtn').disabled = false;\n\n    // Set Text \n    determineAppText(position);\n\n    const baseUrl = 'http://localhost:8000/players/';\n    const url = baseUrl + position;\n    const httpReq = new XMLHttpRequest();\n    console.log(url);\n\n    if(position == 'SEL') {\n      setViewSelections(true);\n      httpReq.open('POST', url, true);\n      httpReq.setRequestHeader('Content-type', 'application/json');\n\n      httpReq.onreadystatechange = function() {//Call a function when the state changes.\n        if(httpReq.readyState == 4 && httpReq.status == 201) {\n          let selections = JSON.parse(httpReq.responseText);\n          setPlayers(selections);\n        }\n\n        else {\n          // Error message\n        }\n      }\n\n      let data = {\"selectedPlayers\" : selectedPlayerState};\n      httpReq.send(JSON.stringify(data));\n      return;\n    }\n\n    httpReq.onload = function () {\n      let playerList = JSON.parse(httpReq.responseText);\n      setPlayers(playerList)\n    }\n      httpReq.open(\"GET\", url);\n      httpReq.send();\n  }\n\n  // add is boolean value\n  // True if add, false if delete\n  const onSelectPlayer = (playerObj, add) => {\n    if(add) {\n      // Dont add player to selected array if viewing selections\n      let posBtn = document.getElementById(\"PosBtn\");\n      if(posBtn.textContent == \"SEL\") {\n        return;\n      }\n      setSelectedPlayers(arr => [...arr, playerObj]);\n    }\n    else {\n      setSelectedPlayers(arr => (arr.filter((uid) => uid.uid !== playerObj.uid)));\n    }\n  }\n\n  // Sets the text above the table\n  // Text depends on position selected\n  const determineAppText = (position) => {\n    let text = \"\";\n    switch(position) {\n      case 'QB':\n        text = \"Select at least 2 Players.\";\n        break; \n      case 'RB':\n        text = \"Select at least 3 Players.\";\n        break;\n      case 'WR':\n        text = \"Select at least 3 Players.\";\n        break;\n      case 'TE':\n        text = \"Select at least 2 Players.\";\n        break;\n      case 'FLEX':\n        text = \"Select at least 2 Players.\";\n        break;\n      case 'DEF':\n        text = \"Select at least 2 Teams.\";\n        break;\n      case 'SEL':\n        text = \"Your current Selections\";\n        break;\n      case 'SUBMIT':\n        text = \"Your optimal Lineup!\";\n        break;\n      default:\n        text = \"Welcome to Football App!\";\n        break;\n    }\n    setAppText(text);\n  }\n\n  // Checks if minimum number of players are selected\n  // Take in position of players being displayed\n  // Compare selections with min number of selections\n  // Return true if minimum number of players is met\n  // TODO - recursion??\n  const enoughPlayersSelected = ()  => {\n\n    let QBct = 0;\n    let RBct = 0;\n    let WRct = 0;\n    let TEct = 0;\n    let Dct = 0;\n    \n    for(let i = 0; i < selectedPlayerState.length; i++) {\n      switch(selectedPlayerState[i].position) {\n        case 'QB':\n          QBct++;\n          break;\n        case 'RB':\n          RBct++;\n          break;\n        case 'WR':\n          WRct++;\n          break;\n        case 'TE':\n          TEct++;\n          break;\n        case 'D':\n          Dct++;\n          break;\n        default:\n          break;\n      }\n    }\n\n    if(QBct < 1 || RBct < 2 || WRct < 2 || TEct < 1 || Dct < 1) {\n      \n      setEnoughPlayers(false);\n      return;\n    }\n    setEnoughPlayers(true);\n  }\n\n  // Logic to submit lineup to backend\n  const onSubmit = () => {\n\n    if(!enoughPlayers){\n      setAppText(\"Select a player from each position and Ty Again!\");\n      return;\n    }\n    else {\n      setAppText(\"Welcome to Football App\");\n    }\n\n    // Disable Submit button on submit click\n    document.getElementById('SubmitBtn').disabled= true;\n\n    // Set text\n    determineAppText(\"SUBMIT\");\n\n    // Set Dropdown text\n    let posBtn = document.getElementById(\"PosBtn\");\n    posBtn.textContent = \"Lineup\";\n    setEnableLineup(true);\n\n    // Create http call to backend\n    const url = 'http://localhost:8000/submitlineup';\n    const httpReq = new XMLHttpRequest();\n    httpReq.open('POST', url, true);\n    httpReq.setRequestHeader('Content-type', 'application/json');\n    \n    httpReq.onreadystatechange = function() {//Call a function when the state changes.\n      if(httpReq.readyState == 4 && httpReq.status == 201) {\n        // Post was successful, put code here for selecting lineup tab\n        let returnedLineup = JSON.parse(httpReq.responseText);\n        setPlayers(returnedLineup);\n      }\n      else {\n        // Error message\n      }\n    }\n\n    let data = {\"selectedPlayers\" : selectedPlayerState};\n\n    httpReq.send(JSON.stringify(data));\n\n  }\n\n  // Called when reset button is clicked\n  // Removes all selections\n  const clearSelections = () => {\n    // if selections is open, reset screen to qb tab\n    if(viewSelections || enableLineup) {\n      initializePageFromReset(true);\n    }\n    setSelectedPlayers([]);\n  }\n\n  // playerArray is an array of players to be passed in\n  return (\n    <div className='bgImage'>\n      <div className=\"container-fluid\">\n        <Header resetBtnClick={clearSelections} />\n        <div className='container'>\n          <TextBox text={appText} submitBtnClick={onSubmit}/>\n          <PositionTabs position={getPlayers} enableLineup={enableLineup} />\n          <div className='row'>\n            <div className='col table-player'>\n              <PlayerTable playerArray={players} onSelectPlayer={onSelectPlayer} selectedPlayers={selectedPlayerState} viewSelections={viewSelections} validateSelectionLength={enoughPlayersSelected}/>\n            </div>\n        </div>\n      </div>\n      <div className='row'>\n         <div className='col' style={{height: '100px'}}></div>\n      </div>\n      <footer>\n        <p className='footer'>Some Disclaimer about how results are not guaranteed</p>\n      </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}